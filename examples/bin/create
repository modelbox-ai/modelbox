#!/bin/bash
#
# Copyright 2021 The Modelbox Project Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


FLOWUNIT_TEMPLATE_PATH=/usr/local/share/modelbox/project-template/

showhelp() {
	echo " -t, --template=[c++|python|infer|project|service-plugin]    create a c++, python, inference, project, service-plugin template"
	echo " -d, --dir=[directory]                target output directory, default is './'"
	echo " -n, --name=[target-name]             target name, default is 'example'"
	echo " --device=[device]                       target device, default is 'cpu'"
	echo " --type=[type]                        target flowunit type, default is 'normal'"
	echo " --desc=[desc]                 				target flowunit description, default is 'description'"
	echo " --out=[outport]                 			target flowunit outport"
	echo " --in=[inport]                 				target flowunit inport"
}

create_python_template()
{
	if [ -e $directory/$name/$name.py ]; then 
		return 0
	fi

	mv $directory/$name/example.py $directory/$name/$name.py
	if [ $? -ne 0 ]; then
		echo "copy template failed"
		return 1
	fi

	mv $directory/$name/example.toml $directory/$name/$name.toml
	if [ $? -ne 0 ]; then
		echo "copy template failed"
		return 1
	fi

	sed -i "s/ExampleFlowUnit/$flowunit/g" $directory/$name/$name.py
	if [ $? -ne 0 ]; then
		echo "sed .py failed"
		return 1
	fi

	sed -i "s/Example/$big_name/g" $directory/$name/$name.toml
	if [ $? -ne 0 ]; then
		echo "sed .toml failed"
		return 1
	fi

	sed -i "s/example/$name/g" $directory/$name/$name.toml
	if [ $? -ne 0 ]; then
		echo "copy templ.toml failed"
		return 1
	fi

	sed -i "s/device = \"cpu\"/device = \"$device\"/g" $directory/$name/$name.toml
	if [ $? -ne 0 ]; then
		echo "add device failed"
		return 1
	fi

	sed -i "s/$type = false/$type = true/g" $directory/$name/$name.toml
	if [ $? -ne 0 ]; then
		echo "add type failed"
		return 1
	fi

	sed -i "s/\"description\"/\"$desc\"/g" $directory/$name/$name.toml
	if [ $? -ne 0 ]; then
		echo "add property description failed"
		return 1
	fi

	for(( i=0;i<${#out_array[@]}/3;i++)) do
		if [ $i -eq 0 ]; then
			sed -i "s/out_1/${out_array[0]}/g" $directory/$name/$name.toml
			if [ $? -ne 0 ]; then
				echo "add output_$1 failed"
				return 1
			fi

			sed -i "s/type = \"string\" # Output port type/type = \"${out_array[2]}\" # Output port type/g" $directory/$name/$name.toml
			if [ $? -ne 0 ]; then
				echo "add output_$1 failed"
				return 1
			fi

			sed -i "s/device = \"cpu\" # Output port device/device = \"${out_array[1]}\" # Output port device/g" $directory/$name/$name.toml
			if [ $? -ne 0 ]; then
				echo "add output_$1 failed"
				return 1
			fi
			
			sed -i "48 a\ \n" $directory/$name/$name.toml
		else
			let i_plus=$i+1
			let num_line=$i*5+44
			
			sed -i "$num_line a\[output.output$i_plus]" $directory/$name/$name.toml
			sed -i "$(($num_line + 1)) a\name = \"${out_array[i*3]}\"" $directory/$name/$name.toml
			sed -i "$(($num_line + 2)) a\type = \"${out_array[i*3+1]}\"" $directory/$name/$name.toml
			sed -i "$(($num_line + 3)) a\device = \"${out_array[i*3+2]}\"" $directory/$name/$name.toml
			sed -i "$(($num_line + 4)) a\ " $directory/$name/$name.toml
			if [ $? -ne 0 ]; then
				echo "add output_$1 failed"
				return 1
			fi
		fi
	done;
	
	for(( i=0;i<${#in_array[@]}/3;i++)) do
		if [ $i -eq 0 ]; then
			sed -i "s/in_1/${in_array[0]}/g" $directory/$name/$name.toml
			if [ $? -ne 0 ]; then
				echo "add input_$1 failed"
				return 1
			fi

			sed -i "s/type = \"string\" # Input port type/type = \"${in_array[2]}\" # Input port type/g" $directory/$name/$name.toml
			if [ $? -ne 0 ]; then
				echo "add input_$1 failed"
				return 1
			fi

			sed -i "s/device = \"cpu\" # Input port device/device = \"${in_array[1]}\" # Input port device/g" $directory/$name/$name.toml
			if [ $? -ne 0 ]; then
				echo "add input_$1 failed"
				return 1
			fi
		else
			let i_plus=$i+1
			let num_line=$i*5+37
			
			sed -i "$num_line a\[input.input$i_plus]" $directory/$name/$name.toml
			sed -i "$(($num_line + 1)) a\name = \"${in_array[i*3]}\"" $directory/$name/$name.toml
			sed -i "$(($num_line + 2)) a\type = \"${in_array[i*3+1]}\"" $directory/$name/$name.toml
			sed -i "$(($num_line + 3)) a\device = \"${in_array[i*3+2]}\"" $directory/$name/$name.toml
			sed -i "$(($num_line + 4)) a\ " $directory/$name/$name.toml
			if [ $? -ne 0 ]; then
				echo "add input_$1 failed"
				return 1
			fi
		fi
	done;
	
	sed -i "s/example/$name/g" $directory/$name/CMakeLists.txt
	if [ $? -ne 0 ]; then
		echo "sed CMakeLists.txt failed"
		return 1
	fi
}

create_cpp_template()
{
	if [ -e $directory/$name/$name.cc ]; then 
		return 0
	fi

	mv $directory/$name/example.cc $directory/$name/$name.cc
	if [ $? -ne 0 ]; then
		echo "copy template failed"
		return 1
	fi

	mv $directory/$name/example.h $directory/$name/$name.h
	if [ $? -ne 0 ]; then
		echo "copy template failed"
		return 1
	fi

	sed -i "s/ExampleFlowUnit/$flowunit/g" $directory/$name/$name.cc
	if [ $? -ne 0 ]; then
		echo "sed .cc failed"
		return 1
	fi

	sed -i "s/ExampleFlowUnit/$flowunit/g" $directory/$name/$name.h
	if [ $? -ne 0 ]; then
		echo "sed .h failed"
		return 1
	fi

	sed -i "s/example/$name/g" $directory/$name/$name.cc
	if [ $? -ne 0 ]; then
		echo "sed .cc failed"
		return 1
	fi

	sed -i "s/example/$name/g" $directory/$name/CMakeLists.txt
	if [ $? -ne 0 ]; then
		echo "sed CMakeLists.txt failed"
		return 1
	fi

	sed -i "s/example/$name/g" $directory/$name/$name.h
	if [ $? -ne 0 ]; then
		echo "sed .h failed"
		return 1
	fi

}

create_infer_template()
{
	if [ -e $directory/$name/$name.toml ]; then 
		return 0
	fi

	mv $directory/$name/example.toml $directory/$name/$name.toml
	if [ $? -ne 0 ]; then
		echo "copy template failed"
		return 1
	fi

	sed -i "s/example/$name/g" $directory/$name/$name.toml
	if [ $? -ne 0 ]; then
		echo "sed toml failed"
		return 1
	fi

	sed -i "s/example/$name/g" $directory/$name/CMakeLists.txt
	if [ $? -ne 0 ]; then
		echo "sed CMakeLists.txt failed"
		return 1
	fi
}

create_project_template()
{
	sed -i "s/my-project/$name/g" $directory/$name/CMakeLists.txt
	if [ $? -ne 0 ]; then
		echo "copy template failed"
		return 1
	fi
	
	sed -i "s/my-project/$name/g" $directory/$name/src/graph/example.toml
	if [ $? -ne 0 ]; then
		echo "sed CMakeLists.txt failed"
		return 1
	fi
    
}

create_service_plugin_template()
{
	if [ -e $directory/$name/$name.cc ]; then 
		return 0
	fi

	mv $directory/$name/example.cc $directory/$name/$name.cc
	if [ $? -ne 0 ]; then
		echo "copy example.cc failed"
		return 1
	fi

	mv $directory/$name/example.h $directory/$name/$name.h
	if [ $? -ne 0 ]; then
		echo "copy example.h failed"
		return 1
	fi

	sed -i "s/ExamplePlugin/$plugin/g" $directory/$name/$name.cc
	if [ $? -ne 0 ]; then
		echo "copy template failed"
		return 1
	fi

	sed -i "s/ExamplePlugin/$plugin/g" $directory/$name/$name.h
	if [ $? -ne 0 ]; then
		echo "copy template failed"
		return 1
	fi

	sed -i "s/example/$name/g" $directory/$name/$name.cc
	if [ $? -ne 0 ]; then
		echo "copy template failed"
		return 1
	fi

	sed -i "s/example/$name/g" $directory/$name/$name.h
	if [ $? -ne 0 ]; then
		echo "copy template failed"
		return 1
	fi

	sed -i "s/example/$name/g" $directory/$name/CMakeLists.txt
	if [ $? -ne 0 ]; then
		echo "copy template failed"
		return 1
	fi
    
}

create_template()
{
	if [ ! -d $directory ]; then
		echo "$directory directory not exist"
		return 0 
	fi

	if [ -d $directory/$name ]; then
		echo "$directory/$name is already exist"
		return 0 
	fi

	big_name=`echo ${name:0:1} | tr  '[a-z]' '[A-Z]'`${name:1}
	flowunit="${big_name}FlowUnit"
	plugin="${big_name}Plugin"

	if [ "$template" == "python" ]; then
	    cp -r $FLOWUNIT_TEMPLATE_PATH/flowunit/$template $directory/$name
		if [ $? -ne 0 ]; then
			echo "copy python template failed"
			return 1
		fi
		create_python_template
	elif [ "$template" == "c++" ]; then
		cp -r $FLOWUNIT_TEMPLATE_PATH/flowunit/$template $directory/$name
		if [ $? -ne 0 ]; then
			echo "copy c++ template failed"
			return 1
		fi
		create_cpp_template
	elif [ "$template" == "infer" ]; then
		cp -r $FLOWUNIT_TEMPLATE_PATH/flowunit/$template $directory/$name
		if [ $? -ne 0 ]; then
			echo "copy infer template failed"
			return 1
		fi
		create_infer_template
	elif [ "$template" == "project" ]; then
		cp -r $FLOWUNIT_TEMPLATE_PATH/project $directory/$name
		if [ $? -ne 0 ]; then
			echo "copy project template failed"
			return 1
		fi
		create_project_template
	elif [ "$template" == "service-plugin" ]; then
		cp -r $FLOWUNIT_TEMPLATE_PATH/plugin $directory/$name
		if [ $? -ne 0 ]; then
			echo "copy service-plugin template failed"
			return 1
		fi
		create_service_plugin_template
	else
		echo "unsurpport template"
		return 1 
	fi

	if [ $? -ne 0 ]; then
		echo "copy template failed"
		return 1
	fi


}


main() {
	OPTS=`getopt -o n:t:d:h --long template:,name:,dir:,help:,desc:,device:,type:,in:,out \
		-n  "" -- "$@"`

	if [ $# -lt 2 ]; then showhelp; exit 1; fi
	if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

	directory="./"
	name="example"
	desc="description"
	type=""
	device="cpu"
	outport=""
	out_type=""
	out_dev=""
	out_num=0
	inport=""
	in_type=""
	in_dev=""
	in_num=0
	in_array=()
	out_array=()
	

	while true; do
		case "$1" in
		-t | --template)
			template="$2"
			shift 2;;
		-d | --dir)
			directory="$2"
			shift 2;;
		-n | --name)
			name="$2"
			shift 2;;
		-h | --help)
			showhelp
			shift ;;
		--device)
			device="$2"
			shift 2;;
		--type)
			type="$2"
			shift 2;;
		--desc)
			desc="$2"
			shift 2;;
		--in)
			inport="$2"
			in_type="$3"
			in_dev="$4"
			in_array[0+3*$in_num]=$inport
			in_array[1+3*$in_num]=$in_type
			in_array[2+3*$in_num]=$in_dev
			let in_num++;
			shift 4;;
		--out)
			outport="$2"
			out_type="$3"
			out_dev="$4"
			out_array[0+3*$out_num]=$outport
			out_array[1+3*$out_num]=$out_type
			out_array[2+3*$out_num]=$out_dev
			let out_num++;
			shift 4;;
		-- ) shift; break ;;
		* ) break ;;
  		esac
	done

	create_template
	if [ $? -ne 0 ]; then
		rm -r $directory/$name
	fi

	return $?
}

main $@
