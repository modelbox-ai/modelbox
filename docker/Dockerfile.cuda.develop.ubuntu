ARG BASE_IMAGE=ubuntu:18.04
FROM ${BASE_IMAGE} as base

COPY release /opt/release
ADD *.tar.gz /usr/local/

ARG CUDA_VER
ARG CUDA_VERSION
ARG TRT_VERSION
ARG TORCH_VERSION
ARG CUDA_CUDART_VERSION
ARG NVIDIA_CUDA_VERSION
ARG NVIDIA_REQUIRE_CUDA

WORKDIR /root

RUN ln -snf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && echo "Asia/Shanghai" > /etc/timezone && \
    apt update && apt upgrade -y && \
    apt install -y python3.7-dev python3-pip python3-apt python3-setuptools && \
    apt install -y \
        dbus systemd systemd-cron iproute2 gnupg2 curl libcurl4-openssl-dev ca-certificates netcat clang \
        build-essential unzip ffmpeg sudo bash vim gdb git doxygen autoconf cmake gettext openssh-server \
        pkg-config kmod net-tools pciutils libgtk-3-dev libprotobuf-c-dev protobuf-c-compiler duktape-dev \
        libssl-dev libcpprest-dev libswscale-dev libavformat-dev graphviz libgraphviz-dev libfuse-dev && \
    rm -f /usr/bin/python3 /usr/bin/python && \
    update-alternatives --install /usr/bin/python python /usr/bin/python3.7 100 && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.7 100 && \
    update-alternatives --config python3 && \
    ln -sf opencv4/opencv2 /usr/local/include/opencv2 && \
    rm -rf /var/lib/apt/lists/* /root/*

RUN mkdir -p /root/.pip && \
    echo "[global]" > /root/.pip/pip.conf && \
    echo "index-url = https://pypi.python.org/simple" >>/root/.pip/pip.conf && \
    echo "trusted-host = pypi.python.org" >>/root/.pip/pip.conf && \
    echo "timeout = 120" >>/root/.pip/pip.conf && \
    python3 -m pip install --upgrade pip && \
    python3 -m pip install --no-cache-dir wheel numpy pyyaml requests opencv-contrib-python pillow && \
    curl -fsSL https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub | apt-key add - && \
    curl -fsSL https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64/7fa2af80.pub | apt-key add - && \
    echo "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/cuda.list && \
    echo "deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64 /" > /etc/apt/sources.list.d/nvidia-ml.list && \
    apt update && \
    apt install -y --no-install-recommends \
        cuda-cudart-${CUDA_VER}=${CUDA_CUDART_VERSION} \
        cuda-minimal-build-${CUDA_VER} \
        cuda-libraries-dev-${CUDA_VER} \
        cuda-command-line-tools-${CUDA_VER} && \
    ln -s cuda-${CUDA_VERSION} /usr/local/cuda && \
    curl https://nodejs.org/dist/v16.13.2/node-v16.13.2-linux-x64.tar.xz|tar -xJ && \
    cp -af node-v16.13.2-linux-x64/* /usr/local/ && \
    npm install -g npm@latest && npm -v && node -v && \
    npm install -g @angular/cli && \
    npm cache clean --force && \
    rm -rf /var/lib/apt/lists/* /root/*

RUN apt update && \
    if [ "${CUDA_VERSION}" = "10.2" ]; then \
        dnn_ver="8.0.0.180-1+cuda10.2"; \
    elif [ "${CUDA_VERSION}" = "11.2" ]; then \
        dnn_ver="8.4.1.50-1+cuda11.6"; \
    apt install -y --no-install-recommends \
        libcudnn8-dev=${dnn_ver};fi && \
    if [ -n "${TF_VERSION}" ]; then \
        curl -LO https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-gpu-linux-x86_64-2.6.0.tar.gz && \
        tar zxf libtensorflow-gpu-linux-x86_64-2.6.0.tar.gz -C /usr/local/ && \
        python3 -m pip install --no-cache-dir tensorflow-gpu==2.6.0; \
    elif [ -n "${TORCH_VERSION}" ]; then \
        curl -LO https://download.pytorch.org/libtorch/cu102/libtorch-cxx11-abi-shared-with-deps-1.9.1%2Bcu102.zip && \
        unzip libtorch-*.zip -d /root >/dev/null 2>&1 && \
        cp -af libtorch/* /usr/local/; \
    elif [ -n "${TRT_VERSION}" ]; then \
        if [ "${TRT_VERSION}" = "7.1.3.4" ]; then \
            trt_ver="7.1.3-1+cuda10.2"; \
        elif [ "${TRT_VERSION}" = "8.4.2.4" ]; then \
            trt_ver="8.4.2-1+cuda11.6";fi && \
        apt install -y --no-install-recommends \
            libnvinfer-dev=${trt_ver} \
            libnvonnxparsers-dev=${trt_ver} \
            libnvparsers-dev=${trt_ver} \
            libnvinfer-plugin-dev=${trt_ver} \
            python3-libnvinfer-dev=${trt_ver};fi && \
    rm -rf /var/lib/apt/lists/* /root/*

RUN python3 -m pip install --no-cache-dir /opt/release/python/modelbox-*.whl && \
    dpkg -i /opt/release/*.deb && \
    (cd /lib/systemd/system/sysinit.target.wants/; for i in *; \
    do [ $i = systemd-tmpfiles-setup.service ] || rm -f $i; done); \
    rm -f /lib/systemd/system/multi-user.target.wants/*; \
    rm -f /etc/systemd/system/*.wants/*; \
    rm -f /lib/systemd/system/local-fs.target.wants/*; \
    rm -f /lib/systemd/system/sockets.target.wants/*udev*; \
    rm -f /lib/systemd/system/sockets.target.wants/*initctl*; \
    rm -f /lib/systemd/system/basic.target.wants/*; \
    rm -f /lib/systemd/system/anaconda.target.wants/*; \
    sed -i 's/^SystemMaxUse=.*/SystemMaxUse=16M/g' /etc/systemd/journald.conf && \
    echo "/usr/local/nvidia/lib" >> /etc/ld.so.conf.d/nvidia.conf && \
    echo "/usr/local/nvidia/lib64" >> /etc/ld.so.conf.d/nvidia.conf && \
    sed -i "32aPermitRootLogin yes" /etc/ssh/sshd_config && \
    echo 'export TMOUT=0' >> ~/.bashrc && \
    echo 'export HISTSIZE=1000' >> ~/.bashrc && \
    echo '[ -n "${SSH_TTY}" ] && export $(cat /proc/1/environ|tr "\\0" "\\n"|xargs)' >> /etc/bash.bashrc && \
    echo 'export PS1="\[\e[35;1m\][\u@\h \W]$ \[\e[0m\]"' >> ~/.bashrc && \
    ldconfig -v 2>/dev/null && systemctl enable ssh

VOLUME ["/sys/fs/cgroup", "/tmp", "/run", "/run/lock"]
STOPSIGNAL SIGRTMIN+3

LABEL com.nvidia.volumes.needed="nvidia_driver" com.nvidia.cuda.verison="${NVIDIA_CUDA_VERSION}"

ENV PATH /usr/local/nvidia/bin:/usr/local/cuda/bin${PATH:+:${PATH}}
ENV LD_LIBRARY_PATH=/usr/local/lib${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES video,compute,utility
ENV NVIDIA_REQUIRE_CUDA "${NVIDIA_REQUIRE_CUDA}"

CMD ["/sbin/init", "--log-target=journal"]
